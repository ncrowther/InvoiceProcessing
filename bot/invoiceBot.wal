
	Å';ò6∏πAù‘uÆæv¬òu// Description
//	Process invoices from outlook
//
// Author:	Nigel T. Crowther
// Date: 		25-May-2023
// Copyright IBM Corporation 2022. All rights reserved
defVar --name projectBase --type String
defVar --name unpaidInvoicesFolder --type String
defVar --name paidInvoicesFolder --type String
defVar --name failedInvoicesFolder --type String
defVar --name botScriptBaseDir --type String
defVar --name botScript --type String
defVar --name logEntry --type String
defVar --name logDir --type String
defVar --name logFile --type TextFileWriter
defVar --name unpaidInvoicesOutlookFolder --type String
defVar --name logData --type String
defVar --name attachmentsDirectory --type List --innertype String
defVar --name currentMessage --type EmailMessage
defVar --name emailConnection --type EmailConnection
defVar --name htmlEmailBody --type String
defVar --name emailSubject --type String
defVar --name emailBody --type String
defVar --name emailSender --type String
defVar --name emailDestinatary --type List --innertype String
defVar --name emailCopy --type List --innertype String
defVar --name emailHiddenCopy --type List --innertype String
defVar --name emailReceiveDate --type DateTime
defVar --name emailCategory --type List --innertype String
defVar --name emailHeader --type StringDictionary --innertype String
defVar --name paidInvoiceName --type String
defVar --name failedInvoiceName --type String
defVar --name timestamp --type String
defVar --name today --type DateTime
defVar --name fs --type FileSystem
defVar --name invoices --type List --innertype String
defVar --name invoice --type String
defVar --name success --type Boolean
defVar --name result_code --type String
defVar --name result_desc --type String
defVar --name invoiceNumber --type String
defVar --name robotName --type String --value "IBM RPA Invoice Processing Robot"
defVar --name errorMessage --type String
defVar --name windowsHost --type String
defVar --name company --type String
defVar --name companyCode --type String
defVar --name fileExists --type Boolean
defVar --name folderExists --type Boolean
defVar --name logFileName --type String
defVar --name invoiceName --type String
defVar --name outlookUser --type String
defVar --name outlookPwd --type SecureString
defVar --name attachmentCount --type Numeric
defVar --name failedInvoiceCount --type Numeric --value 0
defVar --name successfulInvoiceCount --type Numeric --value 0
defVar --name unidentifiedInvoiceCount --type Numeric --value 0
defVar --name processedInvoiceCount --type Numeric --value 0
defVar --name failedInvoices --type Numeric --value 0
defVar --name adminUser --type String
defVar --name jsonPayload --type String
defVar --name outSuccess --type String
defVar --name supplierId --type String

logMessage --message "${robotName} starting..." --type "Info" --logonwindows  --logname Application --source Application --eventid 0

setVar --name "${logEntry}" --value "Started invoice processing"
goSub --label logEntry

getParameter --name invoiceBasePath --comment "Get the base path for the invoices" projectBase=value
getParameter --name adminUser --comment "Get the email address of the admin user.  This user will receive bot run status emails" adminUser=value
getParameter --name outlookUser --comment "Get the outlook user name that is the from email address used to send emails by this bot" outlookUser=value

setVar --name "${unpaidInvoicesFolder}" --value "${projectBase}\\unpaidInvoices"
setVar --name "${paidInvoicesFolder}" --value "${projectBase}\\paidInvoices"
setVar --name "${failedInvoicesFolder}" --value "${projectBase}\\failedInvoices"
setVar --name "${botScriptBaseDir}" --value "${projectBase}\\bot"
setVar --name "${logDir}" --value "${projectBase}\\logs\\"

onError --label Main_ErrorHandler

goSub --label prepareDirectories

goSub --label processOutlookInvoiceFolders


beginSub --name processOutlookInvoiceFolders

// Connect to IMAP Email server	
imapConnect --connection iannesbit_gmail --mailhost "imap.gmail.com" --mailport 993 --usessl  --integrationuseconnectiontosend  --integrationsmtpcredentials  --integrationsmtphost "smtp.gmail.com" --integrationsmtpport 587 --integrationsmtpusessl  --authenticationtype "IntegrationConnection" --enableLog  emailConnection=value

//imapConnect --connection ntcoutlook365_microsoft_exchange_imap --mailhost "outlook.office365.com" --mailport 993 --usessl  --integrationuseconnectiontosend  --integrationsmtpcredentials  --integrationsmtphost "smtp.office365.com" --integrationsmtpport 587 --integrationsmtpusessl  --authenticationtype "IntegrationConnection" --enableLog  emailConnection=value

goSub --label processEmails

setVar --name "${logEntry}" --value "Bot finished"
goSub --label logEntry

logMessage --message "${robotName} completed" --type "Info" --logonwindows  --logname Application --source Application --eventid 0

if --left "${failedInvoiceCount}" --operator "Greater_Than" --right 0
	goSub --label writeLogFile
	goSub --label sendProcessFailedEmail
endIf

// Disconnect from the server.
emailDisconnect --connection ${emailConnection}

endSub

beginSub --name processEmails

// Apply a filter to search  for emails  containing unpaid invoices

setVar --name "${logEntry}" --value "Reading outlook folder: ${unpaidInvoicesOutlookFolder}"
goSub --label logEntry

emailApplySearchFilters --subjectdirective "All" --wordsdirective "All" --withattachment  --connection ${emailConnection}

foreach --collection "${emailConnection}" --variable "${currentMessage}"
	emailRead --message ${currentMessage} emailSubject=subject emailBody=body htmlEmailBody=htmlbody emailSender=from emailDestinatary=to emailCopy=cc emailHiddenCopy=bcc emailReceiveDate=receiveddate emailHeader=headers emailCategory=labels
	
	goSub --label processAttachment
	
endFor

endSub

beginSub --name processAttachment
setVar --name "${logEntry}" --value "Processing email: ${emailSubject}"
goSub --label logEntry

goSub --label getAttachments

if --left "${attachmentCount}" --operator "Greater_Than" --right 0
	
	getFiles --path "${unpaidInvoicesFolder}" invoices=value
	foreach --collection "${invoices}" --variable "${invoice}"
		
		setVar --name "${logEntry}" --value "Processing Invoice: ${invoice}"
		goSub --label logEntry
		
		goSub --label executeOCRScript
		if --left "${success}" --operator "Is_True" --negate 
			// Invoice failed to read
			incrementVar --number ${failedInvoiceCount}
			goSub --label moveInvoiceToFailedFolder
			setVar --name "${logEntry}" --value "OCR Failed for ${company}:  ${result_desc}  File: ${invoice}"
			goSub --label logError
		else
			goSub --label sendInvoiceToAPI
			if --left "${success}" --operator "Is_True" --negate 
				// Invoice failed to send to API
				incrementVar --number ${failedInvoiceCount}
				goSub --label moveInvoiceToFailedFolder
				setVar --name "${logEntry}" --value "Failed to send invoice to API for ${company} invoice ${invoice}:  ${result_code}:${result_desc}  "
				goSub --label logError
			else
				// Invoice read successfully
				incrementVar --number ${successfulInvoiceCount}
				goSub --label moveInvoiceToPaidFolder
			endIf
		endIf
		
		incrementVar --number ${processedInvoiceCount}
	endFor
endIf
endSub

beginSub --name sendInvoiceToAPI
// Send to simulated API
setVar --name "${logEntry}" --value "Sending invoice : ${invoice}"
goSub --label logEntry

executeScript --name "${botScriptBaseDir}/MomentumAPI.wal" --parameters "in_payload=${jsonPayload}" --output "out_success=${success},out_code=${result_code},out_desc=${result_desc}"
if --left "${success}" --operator "Is_True" --negate 
	setVar --name "${success}" --value false
	setVar --name "${logEntry}" --value "Failed to send invoice to API.  Code ${result_code}: ${result_desc}"
	goSub --label logEntry
	return
endIf
endSub

beginSub --name moveInvoiceToPaidFolder
emailMove --folder ProcessedInvoices --message ${currentMessage}
goSub --label generateTimestamp
setVar --name "${paidInvoiceName}" --value "${paidInvoicesFolder}\\${timestamp}_${company}_${invoiceNumber}.pdf"
trimString --text "${paidInvoiceName}" --trimoption "TrimEnd" paidInvoiceName=value
replaceText --texttoparse "${paidInvoiceName}" --useregex  --pattern "\\n" --regexOptions "0" paidInvoiceName=value
ifFile --file "${paidInvoiceName}" --fileSystem ${fs} fileExists=value
if --left "${fileExists}" --operator "Is_True" --negate 
	fileRename --file "${invoice}" --newname "${paidInvoiceName}" --fileSystem ${fs}
endIf

setVar --name "${logEntry}" --value "Invoice moved to ${paidInvoiceName}"
goSub --label logEntry
endSub

beginSub --name moveInvoiceToFailedFolder
emailMove --folder FailedInvoices --message ${currentMessage}
goSub --label generateTimestamp
setVar --name "${failedInvoiceName}" --value "${failedInvoicesFolder}\\${timestamp}_${company}_${invoiceNumber}.pdf"
trimString --text "${failedInvoiceName}" --trimoption "TrimEnd" failedInvoiceName=value
replaceText --texttoparse "${failedInvoiceName}" --useregex  --pattern "\\n" --regexOptions "0" failedInvoiceName=value
ifFile --file "${failedInvoiceName}" --fileSystem ${fs} fileExists=value
if --left "${fileExists}" --operator "Is_True" --negate 
	fileRename --file "${invoice}" --newname "${failedInvoiceName}" --fileSystem ${fs}
endIf

setVar --name "${logEntry}" --value "FAILURE: Invoice moved to ${failedInvoiceName}"
goSub --label logEntry
endSub

beginSub --name generateTimestamp
getCurrentDateAndTime --localorutc "LocalTime" --comment "Get todays date" today=value
dateTimeToText --culture "en-US" --date "${today}" --usecustomformat  --customformat yyyyMMddHHmmss timestamp=value
endSub

beginSub --name getErrorMessage
getEnvVar --name COMPUTERNAME --target "Process" windowsHost=value
setVar --name "${errorMessage}" --value "FAILURE: An error occurred in RPA Robot.\r\nRobot Name: ${robotName}\r\nWindows Host: ${windowsHost}\r\nError Message: ${rpa:errorMessage}\r\nSubroutine: ${rpa:errorSubName}\r\nLine Number: ${rpa:lineNumber}"
endSub

beginSub --name Main_ErrorHandler
goSub --label getErrorMessage
goSub --label logError
endSub

beginSub --name executeOCRScript

executeScript --name "${botScriptBaseDir}/determineInvoiceType.wal" --parameters "in_subject=${emailSubject},in_sender=${emailSender},in_invoice=${invoice}" --output "out_success=${outSuccess},out_code=${result_code},out_desc=${result_desc},out_company=${company},out_companyCode=${companyCode},out_supplierId=${supplierId}" success=value
if --left "${success}" --operator "Is_True" --negate 
	setVar --name "${success}" --value false
	incrementVar --number ${unidentifiedInvoiceCount}
	setVar --name "${logEntry}" --value "Failed to determine invoice for email: ${emailSubject}"
	goSub --label logEntry
	return
endIf

setVar --name "${logEntry}" --value "Process ${company} invoice"
goSub --label logEntry

setVar --name "${botScript}" --value "${botScriptBaseDir}/invoiceReaders/${company}.wal"
ifFile --file "${botScript}" --fileSystem ${fs} fileExists=value
if --left "${fileExists}" --operator "Is_True" --negate 
	setVar --name "${success}" --value false
	incrementVar --number ${unidentifiedInvoiceCount}
	setVar --name "${logEntry}" --value "No script for ${company}.  Created from template. Please edit ${botScriptBaseDir}/invoiceReaders/${company}.wal"
	fileCopy --from "${botScriptBaseDir}/OcrTemplates/INVOICE_TEMPLATE.wal" --to "${botScriptBaseDir}/invoiceReaders/"
	fileRename --file "${botScriptBaseDir}/invoiceReaders/INVOICE_TEMPLATE.wal" --newname "${botScriptBaseDir}/invoiceReaders/${company}.wal"
	goSub --label logEntry
	return
endIf

// Run the OCR script, creating the invoice as a json payload
executeScript --name "${botScript}" --parameters "in_invoice=${invoice}" --output "out_success=${success},out_code=${result_code},out_desc=${result_desc},out_payload=${jsonPayload}"

endSub

beginSub --name logEntry
logMessage --message "${logEntry}" --type "Info" --logonwindows  --logname Application --source Application --eventid 0
goSub --label generateTimestamp
setVar --name "${logData}" --value "${logData}\r\n${timestamp} : ${logEntry}\r\n"
endSub

beginSub --name logError
goSub --label generateTimestamp
setVar --name "${logData}" --value "${logData}\r\n${timestamp} : ${errorMessage}\r\n"
goSub --label writeLogFile
endSub

beginSub --name writeLogFile

ifFolder --path "${logDir}" --fileSystem ${fs} folderExists=value

goSub --label generateTimestamp
setVar --name "${logFileName}" --value "${logDir}/log_${timestamp}.log"
openTextWriter --mode "OpenOrCreate" --autoflush  --share "None" --path "${logFileName}" --encoding "Default" logFile=value
textWrite --text "${logData}" --file ${logFile}
textFileClose --file ${logFile}
endSub

beginSub --name getAttachments
emailGetAttachment --outputpath "${unpaidInvoicesFolder}" --acceptinlineattachments  --message ${currentMessage} attachmentsDirectory=value
count --collection "${attachmentsDirectory}" attachmentCount=value

endSub
beginSub --name prepareDirectories
ifFolder --path "${unpaidInvoicesFolder}" --fileSystem ${fs} folderExists=value
if --left "${folderExists}" --operator "Is_True" --negate 
	createDir --path "${unpaidInvoicesFolder}" --fileSystem ${fs}
endIf

ifFolder --path "${paidInvoicesFolder}" --fileSystem ${fs} folderExists=value
if --left "${folderExists}" --operator "Is_True" --negate 
	createDir --path "${paidInvoicesFolder}" --fileSystem ${fs}
endIf

ifFolder --path "${failedInvoicesFolder}" --fileSystem ${fs} folderExists=value
if --left "${folderExists}" --operator "Is_True" --negate 
	createDir --path "${failedInvoicesFolder}" --fileSystem ${fs}
endIf

ifFolder --path "${logDir}" --fileSystem ${fs} folderExists=value
if --left "${folderExists}" --operator "Is_True" --negate 
	createDir --path "${logDir}" --fileSystem ${fs}
endIf
endSub

beginSub --name sendProcessFailedEmail
logMessage --message "Send Bot completion email to ${adminUser}" --type "Info" --logonwindows  --logname Application --source Application --eventid 0

setVar --name "${botScript}" --value "${botScriptBaseDir}/sendEmail.wal"
executeScript --name "${botScript}" --parameters "in_emailServerConnectionInstance=${emailConnection},in_logfile=${logFileName},in_subject=\"Bot FAILED\",in_processedInvoices=${processedInvoiceCount},in_sucessfullyProcessed=${successfulInvoiceCount},in_failedProcessed=${failedInvoiceCount},in_unidentifiedInvoices=${unidentifiedInvoiceCount},in_emailUsername=${outlookUser},in_recipients=${adminUser}" --output "out_success=${success},out_code=${result_code},out_desc=${result_desc}," success=value
if --left "${success}" --operator "Is_True" --negate 
	setVar --name "${logEntry}" --value "Failed to send email: ${emailSubject}"
	goSub --label logEntry
	return
endIf
endSub

"	`Ÿ}≥∑xYB≥†«À™w@ï*23.0.0.0