Ï// Description
//	Determine invoice type based on input data
// Input Variables
//	in_sender			- The sender email address
//	in_subject			- The email subject
//	in_invoice	   	      - The invoice containing an extension indicating the type of attachment
//
// Output Variables
// 	out_ocrScript			- The ocr script to run
// 	out_companyCode			- The company code
// 	out_supplierId			- The supplier identifier
// 	out_success			- Boolean value indicating success or failure
//	out_code				- 00 if success, any other number represents an error code
//    out_desc				- Description of error code. For example "Failed to determine invoice type"
//
// Author:	Nigel T. Crowther
// Date: 	26-Oct-2022
// Copyright IBM Corporation 2022. All rights reserved
//
defVar --name in_sender --type String --value "rpabot@midcounties.coop" --parameter  --required
defVar --name in_subject --type String --value "Abaakus invoices #1-3" --parameter  --required
defVar --name in_invoice --type String --value "c:\\temp\\bunzl.xlsx" --parameter  --required
defVar --name out_company --type String --output
defVar --name out_companyCode --type String --output
defVar --name out_supplierId --type String --output
defVar --name out_success --type Boolean --output
defVar --name out_code --type Numeric --output
defVar --name out_desc --type String --output
defVar --name companyCol --type Numeric --value 3
defVar --name companyNameCol --type Numeric --value 2
defVar --name companyCodeCol --type Numeric --value 3
defVar --name supplierIdCol --type Numeric --value 1
defVar --name attachmentType --type String
defVar --name payload --type String
defVar --name response --type String
defVar --name companyJson --type String
defVar --name extractionSuccess --type Boolean
defVar --name extractedTable --type DataTable
defVar --name tableRows --type Numeric
defVar --name tableColumns --type Numeric

// Default return is failure
setVar --name "${out_success}" --value false
setVar --name "${out_code}" --value 99
setVar --name "${out_desc}" --value "Failed to determine invoice type for email ${in_subject}"
changeTextCase --text "${in_subject}" --type "Upper" in_subject=value

// Set invoice file ext
replaceText --texttoparse "${in_invoice}" --useregex  --pattern "^([^.]+)" --regexOptions "Singleline" attachmentType=value
replaceText --texttoparse "${attachmentType}" --textpattern "." attachmentType=value
changeTextCase --text "${attachmentType}" --type "Upper" attachmentType=value

executeRules --label invoiceTypeRule

logMessage --message "Success: ${out_success}\r\nCompany: ${out_company}\r\n" --type "Info"
beginRules --name invoiceTypeRule
	
	case --name "Speciality Drinks" --switches "CaseSwitchesAll"
		when --left "${in_subject}" --operator "Contains" --right "SpecialityDrinks"
	then
		setVar --name "${out_company}" --value SpecialityDrinks
		setVar --name "${out_companyCode}" --value SpecialityDrinks
		setVar --name "${out_supplierId}" --value 786554
		setVar --name "${out_success}" --value true
	endCase
	
	case --name "Abakus Invoices" --switches "CaseSwitchesAll"
		when --left "${in_subject}" --operator "Contains" --right Abaakus
	then
		setVar --name "${out_company}" --value Abakus
		setVar --name "${out_companyCode}" --value ABAKUS
		setVar --name "${out_supplierId}" --value 765777
		setVar --name "${out_success}" --value true
	endCase
	
	case --name "Fiction Invoices" --switches "CaseSwitchesAll"
		when --left "${in_subject}" --operator "Contains" --right Fiction
	then
		setVar --name "${out_company}" --value Fiction
		setVar --name "${out_companyCode}" --value FICTION
		setVar --name "${out_supplierId}" --value 854636
		setVar --name "${out_success}" --value true
	endCase
	
	
endRules*	23.0.10.0